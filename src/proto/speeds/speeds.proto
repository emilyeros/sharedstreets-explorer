syntax = "proto3";

option java_outer_classname = "SharedStreetsSpeedsProto";

enum PeriodSize {
    OneSecond = 0;
    FiveSeconds = 1;
    TenSeconds = 2;
    FifteenSeconds = 3;
    ThirtySeconds = 4;
    OneMinute = 5;
    FiveMinutes = 6;
    TenMinutes = 7;
    FifteenMinutes = 8;
    ThirtyMinutes = 9;
    OneHour = 10;
    OneDay = 11;
    OneWeek = 12;
    OneMonth = 13;
    OneYear = 14;
}

// temporal references for SharedStreets events (in UTC)

message TemporalPeriod {

  PeriodSize periodSize = 1;
  uint64 periodOffset = 2; // period offset from unix epoch
                           // For periodSize = oneYear:
                           //   1970-01-01 = 0
                           //   2015-01-01 = 45
                           // For periodSize = OneMonth:
                           //   1970-01-01 = 0
                           //   2015-01-01 = 540
                           // For periodSize = OneSecond: periodOffset = UNIX timestamp

}

// template for storing weekly cycles of events in local time -- used as a template for developing application specific data standards
// assumes Monday-Sunday week in local time. See OpenTraffic weekly speed data for example implementation.
message WeeklyCycle {

  uint32 year = 1;     // date for Monday of week (Monday midnight is zero for week cycle per ISO-8601)
  uint32 month = 2;
  uint32 day = 3;

  PeriodSize periodSize = 4;

  // repeated [...] periodData = ...; // replace with application specific data payload


}

// SharedStreets uses histograms to store speed observations
// This allows aggregation and calculation of statistics from distribution of speeds
//
//   count
//    4 |       *
//    3 |     * *   * *
//    2 |   * * * * * * *
//    1 | * * * * * * * * * *
//       ________________________
//        0 1 2 3 4 5 6 7 8 9
//             Speed (km/h)
//
//   Mean and variance can be calculated from distribution.
//   Histograms with absolute counts can be added together to merge observations.
//   Histograms can also be stored using scaled counts (0-100 default) to hide absolute observation counts

message SpeedHistogram {
    repeated uint32 speedBin = 1;         // repeated speed bins in km/h, bins are unordered and may not be sequential
    repeated uint32 observationCount = 2; // number of observations for corresponding speedBin. Counts are repeated in same order as bins.
}

message SpeedHistogramByPeriod {
    repeated uint32 periodOffset = 1;      // repeated offset for period (Monday, midnight is zero for week cycle per ISO-8601)
    repeated SpeedHistogram histogram = 2; // SpeedHistogram for period
}

message SpeedSummary{
    uint32 meanSpead = 1;                  // mean speed in km/h

    repeated uint32 percentile = 2;        // repeated percentile value (e.g 50th, 85th stored as 50 or 85)
    repeated uint32 observationCount = 3;  // km/h value for corresponding percentile
}

message SpeedSummaryByPeriod{
    repeated uint32 periodOffset = 1;        // repeated offset for period (Monday, midnight is zero for week cycle per ISO-8601)
    repeated SpeedSummary speedSummary = 3;  // SpeedSummary for period
}


// defines weekly speeds based on speed histogram and/or summary + linear binning following approach used in SharedStreetsBinnedLinearReferences
message SharedStreetsWeeklySpeeds {

  string referenceId = 1;                       // SharedStreets Reference ID
  
  PeriodSize periodSize = 2;                    // optional (hourly if ommited)

  bool scaledCounts = 3;                        // counts in histogram are stored as scaled numbers, otherwise stored as absolute counts
  
  uint64 referenceLength = 4;                   // total length of SharedStreets reference in centimeters (allows users to compare expected length with actual length in internal data)
  uint32 numberOfBins = 5;                      // number of linear bins. bin size is referenceLength / numberOfBins

  repeated uint32 binPosition = 6;                             // linear bin position offset (0 to n-1 bins)
  repeated SpeedHistogramByPeriod   speedsByPeriod = 7;        // repeated speed histogram
  repeated SpeedSummaryByPeriod     speedSummaryByPeriod = 8;  // repeated speed summary
}

