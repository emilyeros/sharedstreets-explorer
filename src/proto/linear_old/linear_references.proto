syntax = "proto3";

option java_outer_classname = "SharedStreetsLinearReferencesProto";


// linear referencing spec for SharedStreets allows description of point and segments features along street references
//
//   [ SharedStreets Ref ]
//   =============*=======
//                ^ point at distance: 75 along reference
//
//   [ SharedStreets Ref ]
//   ========*******======
//           ^     ^ linear segment from distance 50 to 75 along SharedStreets reference


message LinearReference {

  uint64 startDistance = 1; // start distance along SharedStreets reference

  oneof endDistance_present {
    uint64 endDistance = 2;// end distance along SharedStreets reference, null for point linear references
  }

}

message SharedStreetsLinearReferences {

  string referenceId = 1; // SharedStreets Reference ID

  uint64 referenceLength = 2; // total length of SharedStreets reference in centimeters (allows users to compare expected length with actual length in internal data)

  repeated LinearReference references = 3; // one or more linear reference associated with a SharedStreets reference

}

// "binned" linear referencing spec for SharedStreets allows grouping of linear point features into segments along reference
//
//   [ SharedStreets Ref ]
//   referenceLength = 100m
//   numberOfBins = 5
//   =====*=====*=====*=====*=====
//     0     1     2     3     4   = bin position (20m/bin)
//     4     8     0     2     0   = bin value (count of grouped linear features)
//

message DataBin {
  repeated string dataType = 1;
  repeated double value = 2;
}

message BinnedPeriodicData {
  repeated uint32 periodOffset  = 1; 
  repeated DataBin bins = 2;
}

message SharedStreetsBinnedLinearReferences {

  string referenceId = 1;            // SharedStreets Reference ID
  bool scaledCounts = 2;             // counts in histogram are stored as scaled numbers, otherwise stored as absolute counts
  
  uint64 referenceLength = 3;        // total length of SharedStreets reference in centimeters (allows users to compare expected length with actual length in internal data)
  uint32 numberOfBins = 4;           // number of bins, bin size is referenceLength / numberOfBins
                                   
  repeated uint32  binPosition = 5;  // bin position offset (0 to n-1 bins)
  repeated DataBin bins = 6;         // bin value ()

}

enum PeriodSize {
    OneSecond = 0;
    FiveSeconds = 1;
    TenSeconds = 2;
    FifteenSeconds = 3;
    ThirtySeconds = 4;
    OneMinute = 5;
    FiveMinutes = 6;
    TenMinutes = 7;
    FifteenMinutes = 8;
    ThirtyMinutes = 9;
    OneHour = 10;
    OneDay = 11;
    OneWeek = 12;
    OneMonth = 13;
    OneYear = 14;
}

message SharedStreetsWeeklyBinnedLinearReferences {

  string referenceId = 1;           // SharedStreets Reference ID
  PeriodSize periodSize = 2;        // optional (hourly if ommited)

  bool scaledCounts = 3;            // counts in histogram are stored as scaled numbers, otherwise stored as absolute counts
  
  uint64 referenceLength = 4;       // total length of SharedStreets reference in centimeters (allows users to compare expected length with actual length in internal data)
  uint32 numberOfBins = 5;          // number of bins, bin size is referenceLength / numberOfBins
                                    
  repeated uint32   binPosition = 6;                   // period
  repeated BinnedPeriodicData binnedPeriodicData = 7;  // bin value ()

}
